// import { mat4 } from 'https://cdn.jsdelivr.net/npm/gl-matrix@2.4.0/dist/gl-matrix.js';

export function main() {
    const vertices = [ 
3.955407,0.3391467587433492,3.990797,-3.955407,0.9353421431565976,3.990797,3.955407,0.8787951374134907,-3.990797,-3.955407,0.9011600037629154,-3.990797,3.955407,0.034111000798970226,0.0,0.0,0.5932327339495703,3.990797,-3.955407,0.6756136852527014,0.0,0.0,0.3234426400417383,-3.990797,0.0,0.024913667043738985,0.0,3.955407,0.003325294446568927,1.995399,-1.977703,0.1854566214379334,3.990797,-3.955407,0.1876974271658579,-1.995399,1.977703,0.12473065990066401,-3.990797,3.955407,0.2019546120245499,-1.995399,1.977703,0.129545518979156,3.990797,-3.955407,0.7252279416613294,1.995399,-1.977703,0.8879345690008109,-3.990797,0.0,0.5213682609194893,-1.995399,0.0,0.22213392594317627,1.995399,1.977703,0.14440371942953512,0.0,-1.977703,0.29045487799431646,0.0,-1.977703,0.6644948483330917,1.995399,1.977703,0.8590340973211492,1.995399,1.977703,0.530710206693328,-1.995399,-1.977703,0.3551186711002138,-1.995399,3.955407,0.7518975956613377,2.993098,-2.966555,0.9706310118055395,3.990797,-3.955407,0.13205742442598,-2.993098,2.966555,0.43778458594354863,-3.990797,3.955407,0.7992284925902183,-0.997699,0.988852,0.6539572168682521,3.990797,-3.955407,0.8387085706054925,0.997699,-0.988852,0.5500107550163383,-3.990797,0.0,0.5280933002322414,-2.993098,0.0,0.6872659342876972,0.997699,2.966555,0.5273136603565163,0.0,-0.988852,0.7862052107839246,0.0,3.955407,0.8646532999347015,0.997699,-0.988852,0.6081793527244121,3.990797,-3.955407,0.7311048162166127,-0.997699,0.988852,0.17141373943695792,-3.990797,3.955407,0.2499907770125206,-2.993098,2.966555,0.060335433244156356,3.990797,-3.955407,0.33730722820822734,2.993098,-2.966555,0.9704123489324921,-3.990797,0.0,0.0657440891683091,-0.997699,0.0,0.2676298591067432,2.993098,0.988852,0.024025776087245654,0.0,-2.966555,0.8540332758457235,0.0,-1.977703,0.8856130405265625,0.997699,-1.977703,0.5770307087118953,2.993098,-0.988852,0.6351587787321159,1.995399,-2.966555,0.6497929521036063,1.995399,1.977703,0.208656837956691,0.997699,1.977703,0.9109054318184439,2.993098,2.966555,0.31348219777399644,1.995399,0.988852,0.03430047903580491,1.995399,1.977703,0.7307249492818361,-2.993098,1.977703,0.3174808155097516,-0.997699,2.966555,0.23162949336832905,-1.995399,0.988852,0.428697229824215,-1.995399,-1.977703,0.0074066632616005545,-2.993098,-1.977703,0.8560202733292996,-0.997699,-0.988852,0.05277541672686781,-1.995399,-2.966555,0.7147513114719103,-1.995399,-2.966555,0.6554649297907726,-0.997699,-0.988852,0.21222205845548148,-0.997699,-0.988852,0.6922836212735177,-2.993098,0.988852,0.06853452801438187,-0.997699,2.966555,0.19759858358498672,-0.997699,2.966555,0.18192036340367557,-2.993098,0.988852,0.24106827162528244,2.993098,2.966555,0.2847508379324116,2.993098,2.966555,0.5219205760453642,0.997699,-2.966555,0.27350660252745806,2.993098,-0.988852,0.9040551234031848,2.993098,-0.988852,0.8532669404841595,0.997699,-2.966555,0.1290559207937375,0.997699,0.988852,0.5486611299398123,0.997699,0.988852,0.9897584677526233,-2.993098,-2.966555,0.9843091531323515,-2.993098,3.955407,0.24183404051936308,3.491947,-3.460981,0.3530972754197803,3.990797,-3.955407,0.48540074704956104,-3.491947,3.460981,0.3387651163835488,-3.990797,3.955407,0.880234589796695,-0.49885,0.494426,0.3500820428574879,3.990797,-3.955407,0.6004026947367599,0.49885,-0.494426,0.7024004927699768,-3.990797,0.0,0.609766155913027,-3.491947,0.0,0.5616319333267343,0.49885,3.460981,0.6817212293535734,0.0,-0.494426,0.921492808678338,0.0,3.955407,0.9872021544959617,1.496549,-1.483278,0.09411192869325369,3.990797,-3.955407,0.8707550280204035,-1.496549,1.483278,0.4314999587850631,-3.990797,3.955407,0.19357562203103973,-2.494248,2.472129,0.10386689628345125,3.990797,-3.955407,0.044472936723391254,2.494248,-2.472129,0.654754442296552,-3.990797,0.0,0.16659591370869387,-1.496549,0.0,0.4702480404292637,2.494248,1.483278,0.07762248420694462,0.0,-2.472129,0.36805259995962625,0.0,-1.977703,0.16324875020482754,0.49885,-1.977703,0.7024704667669852,2.494248,-0.494426,0.5730684373554725,1.995399,-2.472129,0.4134492976442261,1.995399,1.977703,0.8233830653914715,0.49885,1.977703,0.8753691930876233,2.494248,3.460981,0.41434703571502385,1.995399,1.483278,0.43261237180725853,1.995399,1.977703,0.9447068361093272,-3.491947,1.977703,0.7575242667682357,-1.496549,3.460981,0.5403063359886425,-1.995399,1.483278,0.9663478462033983,-1.995399,-1.977703,0.5573243778180741,-3.491947,-1.977703,0.7223079473988551,-1.496549,-0.494426,0.1525373246939291,-1.995399,-2.472129,0.6468963387042574,-1.995399,3.955407,0.7289155405336699,2.494248,-2.472129,0.9838039480326676,3.990797,-3.955407,0.631260407688933,-2.494248,2.472129,0.5584000807061892,-3.990797,3.955407,0.7501960760860111,-1.496549,1.483278,0.05081844978790817,3.990797,-3.955407,0.7699408741060211,1.496549,-1.483278,0.05995140603270188,-3.990797,0.0,0.3858950843076442,-2.494248,0.0,0.10545302991286831,1.496549,2.472129,0.8606405656102438,0.0,-1.483278,0.2603472621028936,0.0,3.955407,0.07254061905330722,0.49885,-0.494426,0.378609871898521,3.990797,-3.955407,0.9785794067229396,-0.49885,0.494426,0.02088811165166604,-3.990797,3.955407,0.06608427303834286,-3.491947,3.460981,0.2842787022437072,3.990797,-3.955407,0.735969649282895,3.491947,-3.460981,0.14261068288671386,-3.990797,0.0,0.6416966015538645,-0.49885,0.0,0.6631478626067099,3.491947,0.494426,0.24124499139175504,0.0,-3.460981,0.48077035282575853,0.0,-1.977703,0.3408868496146742,1.496549,-1.977703,0.8600189024185246,3.491947,-1.483278,0.7109319765987773,1.995399,-3.460981,0.9057539807504538,1.995399,1.977703,0.3986540508637808,1.496549,1.977703,0.39854793656206045,3.491947,2.472129,0.9780766249534958,1.995399,0.494426,0.24941185005478927,1.995399,1.977703,0.0169893419976318,-2.494248,1.977703,0.06446289113908088,-0.49885,2.472129,0.43162537225347286,-1.995399,0.494426,0.8582723021707855,-1.995399,-1.977703,0.5270539864495537,-2.494248,-1.977703,0.916907472868753,-0.49885,-1.483278,0.7024712048640076,-1.995399,-3.460981,0.29491151142947536,-1.995399,-2.966555,0.8610530658235632,-1.496549,-2.966555,0.0010091994918890457,-0.49885,-2.472129,0.0668112103218731,-0.997699,-3.460981,0.8217019843136731,-0.997699,-0.988852,0.944912495580742,-1.496549,-0.988852,0.7502674552109636,-0.49885,-0.494426,0.11417854231632885,-0.997699,-1.483278,0.3735252784537787,-0.997699,-0.988852,0.46865366717054724,-3.491947,-0.988852,0.6844027505075942,-2.494248,-0.494426,0.727969489887055,-2.993098,-1.483278,0.4907274640381357,-2.993098,0.988852,0.35660835520449186,-1.496549,0.988852,0.16524840693356135,-0.49885,1.483278,0.9534278701466761,-0.997699,0.494426,0.9259167718702158,-0.997699,2.966555,0.2979391465483222,-1.496549,2.966555,0.6033288494751806,-0.49885,3.460981,0.446517493537124,-0.997699,2.472129,0.5036605289083463,-0.997699,2.966555,0.4601100620509896,-3.491947,2.966555,0.12289125093662712,-2.494248,3.460981,0.5041827014828836,-2.993098,2.472129,0.23512491658212387,-2.993098,0.988852,0.3122840171164205,2.494248,0.988852,0.9100731418002788,3.491947,1.483278,0.6804869611368378,2.993098,0.494426,0.33451943411058604,2.993098,2.966555,0.6473363344758201,2.494248,2.966555,0.3710488070739423,3.491947,3.460981,0.48229432855533416,2.993098,2.472129,0.7514627399590302,2.993098,2.966555,0.5343917380310086,0.49885,2.966555,0.4417315594432836,1.496549,3.460981,0.2367186561820801,0.997699,2.472129,0.7079507595010518,0.997699,-2.966555,0.419519274826048,2.494248,-2.966555,0.5026108786131299,3.491947,-2.472129,0.4905835365311536,2.993098,-3.460981,0.6362903494375661,2.993098,-0.988852,0.29112311728932716,2.494248,-0.988852,0.9390689229046594,3.491947,-0.494426,0.3039324169112876,2.993098,-1.483278,0.4966189351737347,2.993098,-0.988852,0.6413739188003832,0.49885,-0.988852,0.2212601007454592,1.496549,-0.494426,0.5455716377286098,0.997699,-1.483278,0.7586715080017384,0.997699,-2.966555,0.36834965645432916,0.49885,-2.966555,0.9960552464696513,1.496549,-2.472129,0.14825011248081388,0.997699,-3.460981,0.5895751784551869,0.997699,0.988852,0.8087328082344716,0.49885,0.988852,0.8109577058919152,1.496549,1.483278,0.8340715805026103,0.997699,0.494426,0.5218008371135641,0.997699,0.988852,0.6891699860821993,-3.491947,0.988852,0.8056395110267446,-2.494248,1.483278,0.8928856260450059,-2.993098,0.494426,0.145255481728493,-2.993098,-2.966555,0.4387533859634596,-3.491947,-2.966555,0.6673794916408119,-2.494248,-2.472129,0.1785395484398582,-2.993098,-3.460981,0.08995377929179549,-2.993098,-3.460981,0.8856771281402839,-2.494248,-2.472129,0.6336825155146034,-2.494248,-2.472129,0.9097892903861935,-3.491947,0.494426,0.02417191099394478,-2.494248,1.483278,0.3928156344986281,-2.494248,1.483278,0.29026253547286585,-3.491947,0.494426,0.8807125844458047,1.496549,1.483278,0.3260800527019039,1.496549,1.483278,0.6044375037064781,0.49885,-3.460981,0.6237250063307245,1.496549,-2.472129,0.7104187276115863,1.496549,-2.472129,0.034832180052220885,0.49885,-1.483278,0.13389798797011998,1.496549,-0.494426,0.8087357409097979,1.496549,-0.494426,0.36172910202627584,0.49885,-1.483278,0.8811175834286988,3.491947,-0.494426,0.7168382240193573,3.491947,-0.494426,0.5007781562365964,2.494248,-3.460981,0.3836804778161643,3.491947,-2.472129,0.8349343058693788,3.491947,-2.472129,0.21191106542214477,2.494248,2.472129,0.29516531303759674,1.496549,3.460981,0.7118426973197888,1.496549,3.460981,0.6951080787271151,0.49885,2.472129,0.5079806148996566,3.491947,3.460981,0.1606008389343654,3.491947,3.460981,0.37168314734253394,2.494248,0.494426,0.7594092886895641,3.491947,1.483278,0.8932032766782316,3.491947,1.483278,0.16330117969007052,2.494248,2.472129,0.2759259637133602,-2.494248,3.460981,0.9739044124550635,-2.494248,3.460981,0.476152045713611,-3.491947,2.472129,0.12957746500159129,-0.49885,3.460981,0.02686420349682428,-0.49885,3.460981,0.10393866641125893,-1.496549,0.494426,0.7500178692472308,-0.49885,1.483278,0.5240888906425182,-0.49885,1.483278,0.8036416589082078,-1.496549,-1.483278,0.2242795911568768,-2.494248,-0.494426,0.9631999317404623,-2.494248,-0.494426,0.2862976085440645,-3.491947,-1.483278,0.011703237525537813,-0.49885,-0.494426,0.7774333401490081,-0.49885,-0.494426,0.6491681993513537,-1.496549,-3.460981,0.240224364417026,-0.49885,-2.472129,0.7420880617097501,-0.49885,-2.472129,0.25972798288206966,-1.496549,-3.460981,0.5499705115589929,-1.496549,-1.483278,0.8872527566097966,-1.496549,-1.483278,0.29469598412801246,-3.491947,0.494426,0.7041564384316867,-1.496549,2.472129,0.6998165937605357,-1.496549,2.472129,0.9087183618469984,-3.491947,0.494426,0.6016710722511577,2.494248,2.472129,0.7603414594473029,2.494248,2.472129,0.6085074227143277,0.49885,-3.460981,0.3955071408183105,2.494248,-1.483278,0.12204313301393355,2.494248,-1.483278,0.9279790234146109,0.49885,-3.460981,0.9670786683861289,0.49885,0.494426,0.2911124846555587,0.49885,0.494426,0.13973080990552333,-3.491947,-3.460981,0.6674623137432246,-3.491947

    ];
    const normals = [ 0.0,1.0,0.0
    ];
    const indices = [ 83,288,140,89,287,136,90,286,143,87,285,144,105,284,132,106,283,147,99,282,148,109,281,131,110,280,151,102,279,152,113,278,124,114,277,155,101,276,156,117,275,128,118,274,159,95,273,160,161,272,120,162,271,163,135,270,164,165,269,119,166,268,167,158,267,168,169,266,88,170,265,171,157,264,172,173,263,116,174,262,175,141,261,176,177,260,115,178,259,179,154,258,180,181,257,84,182,256,183,153,255,184,185,254,112,186,253,187,142,252,188,189,251,111,190,250,191,150,249,192,193,248,91,194,247,195,149,246,196,197,245,108,198,244,199,139,243,200,201,242,107,202,241,203,146,240,204,205,239,92,206,238,207,145,237,208,209,236,104,210,235,211,127,234,212,213,233,103,214,232,215,130,231,216,217,230,96,218,229,219,129,228,220,221,227,100,222,226,223,123,225,224,225,222,80,160,64,222,11,160,225,226,157,61,120,24,157,64,120,226,227,117,16,223,61,117,80,223,227,228,218,79,156,60,218,17,156,228,229,153,57,116,23,153,60,116,229,230,113,12,219,57,113,79,219,230,231,214,78,152,56,214,18,152,231,232,149,53,112,22,149,56,112,232,233,109,19,215,53,109,78,215,233,234,210,77,148,52,210,15,148,234,235,145,49,108,21,145,52,108,235,236,105,20,211,49,105,77,211,236,237,206,76,147,51,206,21,147,237,238,130,34,107,18,130,51,107,238,239,90,8,207,34,90,76,207,239,240,202,75,94,38,202,10,94,240,241,142,46,134,5,142,38,134,241,242,102,18,203,46,102,75,203,242,243,198,74,82,26,198,1,82,243,244,146,50,122,10,146,26,122,244,245,106,21,199,50,106,74,199,245,246,194,73,151,55,194,22,151,246,247,93,37,111,9,93,55,111,247,248,133,4,195,37,133,73,195,248,249,190,72,98,42,190,14,98,249,250,81,25,138,0,81,42,138,250,251,121,9,191,25,121,72,191,251,252,186,71,86,30,186,5,86,252,253,150,54,126,14,150,30,126,253,254,110,22,187,54,110,71,187,254,255,182,70,155,59,182,23,155,255,256,97,41,115,13,97,59,115,256,257,137,2,183,41,137,70,183,257,258,178,69,131,35,178,19,131,258,259,85,29,91,4,85,35,91,259,260,125,13,179,29,125,69,179,260,261,174,68,143,47,174,8,143,261,262,154,58,103,19,154,47,103,262,263,114,23,175,58,114,68,175,263,264,170,67,159,63,170,24,159,264,265,129,33,119,17,129,63,119,265,266,89,7,171,33,89,67,171,266,267,166,66,132,36,166,20,132,267,268,141,45,92,8,141,36,92,268,269,101,17,167,45,101,66,167,269,270,162,65,144,48,162,6,144,270,271,158,62,104,20,158,48,104,271,272,118,24,163,62,118,65,163,272,273,161,64,164,65,161,39,164,273,274,165,63,168,66,165,62,168,274,275,169,32,172,67,169,61,172,275,276,173,60,176,68,173,45,176,276,277,177,59,180,69,177,58,180,277,278,181,28,184,70,181,57,184,278,279,185,56,188,71,185,46,188,279,280,189,55,192,72,189,54,192,280,281,193,35,196,73,193,53,196,281,282,197,52,200,74,197,43,200,282,283,201,51,204,75,201,50,204,283,284,205,36,208,76,205,49,208,284,285,209,48,212,77,209,31,212,285,286,213,47,216,78,213,34,216,286,287,217,40,220,79,217,33,220,287,288,221,44,224,80,221,27,224,288,83,140,3,89,136,7,90,143,8,87,144,6,105,132,20,106,147,21,99,148,15,109,131,19,110,151,22,102,152,18,113,124,12,114,155,23,101,156,17,117,128,16,118,159,24,95,160,11,161,120,64,162,163,65,135,164,39,165,119,63,166,167,66,158,168,62,169,88,32,170,171,67,157,172,61,173,116,60,174,175,68,141,176,45,177,115,59,178,179,69,154,180,58,181,84,28,182,183,70,153,184,57,185,112,56,186,187,71,142,188,46,189,111,55,190,191,72,150,192,54,193,91,35,194,195,73,149,196,53,197,108,52,198,199,74,139,200,43,201,107,51,202,203,75,146,204,50,205,92,36,206,207,76,145,208,49,209,104,48,210,211,77,127,212,31,213,103,47,214,215,78,130,216,34,217,96,40,218,219,79,129,220,33,221,100,44,222,223,80,123,224,27,225,80,224,160,222,225,11,225,123,226,61,223,120,157,226,64,226,222,227,16,100,223,117,227,80,227,221,228,79,220,156,218,228,17,228,129,229,57,219,116,153,229,60,229,218,230,12,96,219,113,230,79,230,217,231,78,216,152,214,231,18,231,130,232,53,215,112,149,232,56,232,214,233,19,103,215,109,233,78,233,213,234,77,212,148,210,234,15,234,127,235,49,211,108,145,235,52,235,210,236,20,104,211,105,236,77,236,209,237,76,208,147,206,237,21,237,145,238,34,207,107,130,238,51,238,206,239,8,92,207,90,239,76,239,205,240,75,204,94,202,240,10,240,146,241,46,203,134,142,241,38,241,202,242,18,107,203,102,242,75,242,201,243,74,200,82,198,243,1,243,139,244,50,199,122,146,244,26,244,198,245,21,108,199,106,245,74,245,197,246,73,196,151,194,246,22,246,149,247,37,195,111,93,247,55,247,194,248,4,91,195,133,248,73,248,193,249,72,192,98,190,249,14,249,150,250,25,191,138,81,250,42,250,190,251,9,111,191,121,251,72,251,189,252,71,188,86,186,252,5,252,142,253,54,187,126,150,253,30,253,186,254,22,112,187,110,254,71,254,185,255,70,184,155,182,255,23,255,153,256,41,183,115,97,256,59,256,182,257,2,84,183,137,257,70,257,181,258,69,180,131,178,258,19,258,154,259,29,179,91,85,259,35,259,178,260,13,115,179,125,260,69,260,177,261,68,176,143,174,261,8,261,141,262,58,175,103,154,262,47,262,174,263,23,116,175,114,263,68,263,173,264,67,172,159,170,264,24,264,157,265,33,171,119,129,265,63,265,170,266,7,88,171,89,266,67,266,169,267,66,168,132,166,267,20,267,158,268,45,167,92,141,268,36,268,166,269,17,119,167,101,269,66,269,165,270,65,164,144,162,270,6,270,135,271,62,163,104,158,271,48,271,162,272,24,120,163,118,272,65,272,161,273,64,160,164,161,273,39,273,95,274,63,159,168,165,274,62,274,118,275,32,128,172,169,275,61,275,117,276,60,156,176,173,276,45,276,101,277,59,155,180,177,277,58,277,114,278,28,124,184,181,278,57,278,113,279,56,152,188,185,279,46,279,102,280,55,151,192,189,280,54,280,110,281,35,131,196,193,281,53,281,109,282,52,148,200,197,282,43,282,99,283,51,147,204,201,283,50,283,106,284,36,132,208,205,284,49,284,105,285,48,144,212,209,285,31,285,87,286,47,143,216,213,286,34,286,90,287,40,136,220,217,287,33,287,89,288,44,140,224,221,288,27,288,83
    ];

    const canvas = document.getElementById("main_canvas");
    const gl = canvas.getContext("webgl");
    if (!gl) {
        console.error("WebGL not supported");
        return;
    }

    // Initialize shaders
    const vertexShaderSource = document.getElementById("vshader").text;
    const fragmentShaderSource = document.getElementById("fshader").text;
    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
    const program = createProgram(gl, vertexShader, fragmentShader);
    gl.useProgram(program);

    // Set up buffers
    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

    const normalBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);

    const indexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);

    // Link vertex data
    const aPosition = gl.getAttribLocation(program, "aPosition");
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(aPosition);

    // Link normal data
    const aNormal = gl.getAttribLocation(program, "aNormal");
    gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);
    gl.vertexAttribPointer(aNormal, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(aNormal);

    // Set uniform variables
    var uModelMatrix = gl.getUniformLocation(program, "uModelMatrix");
    var uViewMatrix = gl.getUniformLocation(program, "uViewMatrix");
    var uProjectionMatrix = gl.getUniformLocation(program, "uProjectionMatrix");
    var uNormalMatrix = gl.getUniformLocation(program, "uNormalMatrix");
    var uMaterialDiffuseColor = gl.getUniformLocation(program, "uMaterialDiffuseColor");
    var uLightDiffuseColor = gl.getUniformLocation(program, "uLightDiffuseColor");
    var uLightDirectionVector = gl.getUniformLocation(program, "uLightDirectionVector");

    var modelMatrix = mat4.create();
    var viewMatrix = mat4.create();
    var projectionMatrix = mat4.create();
    var normalMatrix = mat4.create();

    var lookAtPoint = [0.0,0.0,0.0,1.0];              //where the camera is looking
    var eyePoint    = [3.0,4.0,5.0,1.0];              //where the camera is placed
    var upVector    = [0.0,1.0,0.0,0.0];              //orientation of the camera

    mat4.perspective(projectionMatrix, Math.PI / 4, canvas.width / canvas.height, 0.1, 100);
    mat4.lookAt(viewMatrix,eyePoint,lookAtPoint,upVector);
    mat4.invert(normalMatrix, modelMatrix);
    mat4.transpose(normalMatrix, normalMatrix);

    gl.uniformMatrix4fv(uModelMatrix, false, modelMatrix);
    gl.uniformMatrix4fv(uViewMatrix, false, viewMatrix);
    gl.uniformMatrix4fv(uProjectionMatrix, false, projectionMatrix);
    gl.uniformMatrix4fv(uNormalMatrix, false, normalMatrix);

    gl.uniform4f(uMaterialDiffuseColor, 1.0, 0.5, 1.0, 1.0);
    gl.uniform4f(uLightDiffuseColor, 1.0, 1.0, 1.0, 1.0);
    gl.uniform4f(uLightDirectionVector, 0.5, 0.7, 1.0, 0.0);

    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.enable(gl.DEPTH_TEST);

    drawScene(gl, indices.length);

    function redraw(){
        gl.clearColor(0.0,0.0,0.0,1.0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
        gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_BYTE, 0); 
      }
      document.getElementById("dirX").addEventListener("change",updateLightPosition);
      document.getElementById("dirY").addEventListener("change",updateLightPosition);
      document.getElementById("dirZ").addEventListener("change",updateLightPosition);
      function updateLightPosition(){
        let dirX = parseFloat(document.getElementById("dirX").value);
        let dirY = parseFloat(document.getElementById("dirY").value);
        let dirZ = parseFloat(document.getElementById("dirZ").value);
        console.log(dirX, dirY, dirZ);
        gl.uniform4f(uLightDirectionVector,dirX,dirY,dirZ,0.0);
        redraw();
      }
      document.getElementById("colorX").addEventListener("change",updateLightColor);
      document.getElementById("colorY").addEventListener("change",updateLightColor);
      document.getElementById("colorZ").addEventListener("change",updateLightColor);
      function updateLightColor(){
        let colorX = parseFloat(document.getElementById("colorX").value);
        let colorY = parseFloat(document.getElementById("colorY").value);
        let colorZ = parseFloat(document.getElementById("colorZ").value);
        console.log(colorX, colorY, colorZ);
        
        gl.uniform4f(uLightDiffuseColor,colorX,colorY,colorZ, 1.0);

        redraw();
      }
      document.getElementById("eyeX").addEventListener("change",updateEyePosition);
      document.getElementById("eyeY").addEventListener("change",updateEyePosition);
      document.getElementById("eyeZ").addEventListener("change",updateEyePosition);
      function updateEyePosition(){
        let eyeX = parseFloat(document.getElementById("eyeX").value);
        let eyeY = parseFloat(document.getElementById("eyeY").value);
        let eyeZ = parseFloat(document.getElementById("eyeZ").value);
        console.log(colorX, colorY, colorZ);
        let eyePoint = [eyeX, eyeY, eyeZ, 1.0];
        mat4.lookAt(viewMatrix,eyePoint,lookAtPoint,upVector);
        gl.uniformMatrix4fv(uViewMatrix,false,new Float32Array(viewMatrix));
        redraw();
      }
      var rotationAngle = 0; // Variable to track rotation angle
      var rotate = false; // Variable to track rotation state
      var rotationInterval; // Variable to store the interval ID
      
      document.getElementById("animate").addEventListener("click", flip);
      
      function flip() {
          rotate = !rotate;
          if (rotate) {
              // Start rotation
              rotationInterval = setInterval(updateRotation, 24);
          } else {
              // Stop rotation
              clearInterval(rotationInterval);
          }
      }
      
      function updateRotation() {
          rotationAngle += 0.01;
          if (rotationAngle >= 2 * Math.PI) {
              rotationAngle -= 2 * Math.PI;
          }
          modelMatrix = mat4.create();
          mat4.rotateY(modelMatrix, modelMatrix, rotationAngle); // Rotate around Y-axis
          gl.uniformMatrix4fv(uModelMatrixPointer, false, new Float32Array(modelMatrix));
          redraw();
      }
      document.getElementById("lambert").addEventListener("click",lambert);
      document.getElementById("phong").addEventListener("click",phong);
      var activeModelText = document.getElementById("activeModel");
}

function createShader(gl, type, source) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);
        return null;
    }
    return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
    const program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        console.error('Error linking program:', gl.getProgramInfoLog(program));
        gl.deleteProgram(program);
        return null;
    }
    return program;
}

function drawScene(gl, indexCount) {
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.drawElements(gl.TRIANGLES, indexCount, gl.UNSIGNED_SHORT, 0);
    //   function lambert(){
    //     activeModelText.textContent = "Active Model: Lambert";
    //   }
    //   function phong(){
    //     activeModelText.textContent = "Active Model: Phong";
    //   }
    //   var uShininessPointer = gl.getUniformLocation(program, "uShininess");
    //   gl.uniform1f(uShininessPointer, 80); 
    
}

main();
